class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        if(prerequisites.length <= 1) return true;

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0; i<numCourses; i++){
            adj.add(new ArrayList<>());
        }

        for(int i[]:prerequisites){
            adj.get(i[0]).add(i[1]);  
        }  

        int vis[] = new int[numCourses];
        for(int i=0; i<numCourses; i++){
            if(vis[i] == 0){
                if(isCycle(adj, vis, i)) return false;
            }
        }
        return true;
    }

    private boolean isCycle(ArrayList<ArrayList<Integer>> adj, int vis[], int cur){
        if(vis[cur]==2) return true;

        vis[cur] = 2;
        for(int it : adj.get(cur)){
            if(vis[it] != 1){
                if(isCycle(adj, vis, it)) return true;
            }
        }
        vis[cur] = 1;
        return false;
    }
}